You said:
what are some most useful and most common functions for string manipulation in c , can you give some examples of them in order how to learn
ChatGPT said:

String manipulation in C is an essential skill to master for handling and processing text. Below are some of the most useful and common functions for string manipulation in C, ordered in a way that builds progressively on the concepts. I'll also provide examples for each function to help you understand them better.
1. strlen() – Get the length of a string

This function returns the length of a string (not including the null terminator '\0').   
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, world!";
    printf("Length of string: %lu\n", strlen(str));
    return 0;
}

2. strcpy() – Copy one string to another

This function copies the content of one string into another string. Ensure the destination string has enough space to accommodate the source string.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char src[] = "Hello";
    char dest[20];
    
    strcpy(dest, src);  // Copy src to dest
    printf("Destination string: %s\n", dest);
    
    return 0;
}

3. strncpy() – Copy a specified number of characters from one string to another

This is similar to strcpy(), but it allows you to specify how many characters you want to copy. It's safer because you can limit the number of characters copied.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char src[] = "Hello, world!";
    char dest[10];
    
    strncpy(dest, src, 5);  // Copy first 5 characters
    dest[5] = '\0';         // Manually null-terminate the string
    printf("Destination string: %s\n", dest);
    
    return 0;
}

4. strcat() – Concatenate two strings

This function appends the second string to the first string. The destination string must have enough space to accommodate the combined string.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str1[20] = "Hello";
    char str2[] = " World!";
    
    strcat(str1, str2);  // Append str2 to str1
    printf("Concatenated string: %s\n", str1);
    
    return 0;
}

5. strncat() – Concatenate a specified number of characters from one string to another

This is similar to strcat(), but it limits the number of characters to append, providing more control over memory management.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str1[20] = "Hello";
    char str2[] = " Wonderful World!";
    
    strncat(str1, str2, 10);  // Append first 10 characters of str2 to str1
    printf("Concatenated string: %s\n", str1);
    
    return 0;
}

6. strcmp() – Compare two strings

This function compares two strings lexicographically. It returns:

    0 if the strings are equal,
    a negative value if the first string is less than the second,
    a positive value if the first string is greater than the second.

Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str1[] = "apple";
    char str2[] = "orange";
    
    int result = strcmp(str1, str2);  // Compare the strings
    if (result == 0)
        printf("The strings are equal.\n");
    else if (result < 0)
        printf("'%s' is less than '%s'.\n", str1, str2);
    else
        printf("'%s' is greater than '%s'.\n", str1, str2);
    
    return 0;
}

7. strncmp() – Compare a specified number of characters of two strings

This function is similar to strcmp(), but it compares only the first n characters.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str1[] = "apple";
    char str2[] = "apricot";
    
    int result = strncmp(str1, str2, 3);  // Compare first 3 characters
    if (result == 0)
        printf("The first 3 characters are equal.\n");
    else
        printf("The first 3 characters are not equal.\n");
    
    return 0;
}

8. strchr() – Find the first occurrence of a character in a string

This function locates the first occurrence of a character in a string and returns a pointer to it.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, world!";
    char *ptr = strchr(str, 'w');
    
    if (ptr != NULL)
        printf("Found 'w' at position: %ld\n", ptr - str);
    else
        printf("'w' not found.\n");
    
    return 0;
}

9. strrchr() – Find the last occurrence of a character in a string

This function finds the last occurrence of a character in a string.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, world!";
    char *ptr = strrchr(str, 'o');
    
    if (ptr != NULL)
        printf("Last occurrence of 'o' at position: %ld\n", ptr - str);
    else
        printf("'o' not found.\n");
    
    return 0;
}

10. strstr() – Find the first occurrence of a substring in a string

This function returns a pointer to the first occurrence of a substring in a string, or NULL if the substring is not found.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, world!";
    char *ptr = strstr(str, "world");
    
    if (ptr != NULL)
        printf("Found substring at position: %ld\n", ptr - str);
    else
        printf("Substring not found.\n");
    
    return 0;
}

11. strtok() – Tokenize a string

This function breaks a string into tokens based on a delimiter. It returns a pointer to the next token and NULL when no more tokens are found.
Example:

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "apple,banana,orange";
    char *token = strtok(str, ",");  // Tokenize based on comma
    
    while (token != NULL) {
        printf("Token: %s\n", token);
        token = strtok(NULL, ",");  // Continue tokenizing
    }
    
    return 0;
}

12. sprintf() – Format and store a string

This function formats data and stores it in a string, similar to printf(), but the output is stored in a variable instead of printed to the console.
Example:

#include <stdio.h>

int main() {
    char buffer[50];
    int age = 25;
    
    sprintf(buffer, "I am %d years old.", age);  // Format and store in buffer
    printf("%s\n", buffer);
    
    return 0;
}

Conclusion

The above functions form the core set for string manipulation in C. Start by understanding each one and experimenting with them to get familiar with their behavior. After mastering the basics, you can move on to more complex string manipulation tasks, such as dynamic memory allocation and working with multibyte/Unicode characters.

=
ChatGPT can make mistakes. Check important info.
